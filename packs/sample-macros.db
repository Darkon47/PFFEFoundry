{"_id":"0MoNT9JU384NRc23","name":"Toggle Buff","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n  buffName: \"Mage Armor\"\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC);\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  for (let actor of actors) {\r\n    const buff = actor.items.find(o => o.name === c.buffName);\r\n    if (buff != null) {\r\n      let active = getProperty(buff.data, \"data.active\");\r\n      if (active == null) active = false;\r\n      buff.update({ \"data.active\": !active });\r\n    }\r\n  }\r\n}\r\n","author":"T9i9xVjdkHeFZC72","img":"systems/pf1/icons/spells/protect-blue-1.jpg","actorIds":[]}
{"_id":"13AHAyh9DklWxvWP","name":"Show Defenses","permission":{"default":0},"type":"script","sort":100001,"flags":{},"scope":"global","command":"game.pf1.rollDefenses();","author":"T9i9xVjdkHeFZC72","img":"systems/pf1/icons/items/armor/shield-light-metal.png","actorIds":[]}
{"_id":"V11j6nCzmewZiMef","name":"Roll Saving Throw","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC);\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _roll = function(type) {\r\n    actors.forEach(o => {\r\n      o.rollSavingThrow(type, { event: new MouseEvent({}) });\r\n    });\r\n  };\r\n\r\n  const msg = `Choose a saving throw to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>`,\r\n    buttons: {\r\n      fort: {\r\n        label: \"Fortitude\",\r\n        callback: () => _roll(\"fort\"),\r\n      },\r\n      ref: {\r\n        label: \"Reflex\",\r\n        callback: () => _roll(\"ref\"),\r\n      },\r\n      will: {\r\n        label: \"Will\",\r\n        callback: () => _roll(\"will\"),\r\n      },\r\n    },\r\n  }).render(true);\r\n}","author":"T9i9xVjdkHeFZC72","img":"systems/pf1/icons/feats/diehard.jpg","actorIds":[]}
{"name":"Award XP","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"\r\n// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC);\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _action = function(xp) {\r\n    if (!isNaN(xp)) {\r\n      actors.forEach(o => {\r\n        const curXP = getProperty(o.data, \"data.details.xp.value\") || 0;\r\n        o.update({ \"data.details.xp.value\": curXP + xp });\r\n      });\r\n    }\r\n  };\r\n\r\n  const msg = `Award XP to the following actors: <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n  const field = `<input type=\"text\" name=\"xp\" value=\"0\" placeholder=\"XP amount\" style=\"margin-bottom: 8px;\" />`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>${field}`,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Give All\",\r\n        callback: html => {\r\n          let xp = parseInt(html.find('input[name=\"xp\"]').val());\r\n          _action(xp);\r\n        },\r\n      },\r\n      distribute: {\r\n        label: \"Distribute\",\r\n        callback: html => {\r\n          let xp = parseInt(html.find('input[name=\"xp\"]').val());\r\n          xp = Math.floor(xp / actors.length);\r\n          _action(xp);\r\n        }\r\n      }\r\n    },\r\n  }).render(true);\r\n}\r\n","author":"T9i9xVjdkHeFZC72","img":"icons/svg/book.svg","actorIds":[],"_id":"dMr1RIO7awUbGX4M"}
{"_id":"wd3pvjIJy7wwGB3w","name":"Roll Skill","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n  skills: [\"per\", \"sen\", \"ste\", \"sur\"],\r\n  labels: [null, null, null, null],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC);\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _roll = function(type) {\r\n    actors.forEach(o => {\r\n      try {\r\n        o.rollSkill(type, { event: new MouseEvent({}), skipDialog: true });\r\n      } catch (e) {}\r\n    });\r\n  };\r\n\r\n  const buttons = c.skills.reduce((cur, s, a) => {\r\n    let label = c.labels[a];\r\n    if (label == null) label = CONFIG.PF1.skills[s] || \"Unknown Skill\";\r\n    cur[s] = {\r\n      label: label,\r\n      callback: () => _roll(s),\r\n    };\r\n    return cur;\r\n  }, {});\r\n\r\n  const msg = `Choose a skill to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>`,\r\n    buttons: buttons,\r\n  }).render(true);\r\n}","author":"T9i9xVjdkHeFZC72","img":"systems/pf1/icons/feats/skill-focus.jpg","actorIds":[]}
{"$$deleted":true,"_id":"V11j6nCzmewZiMef"}
{"$$deleted":true,"_id":"wd3pvjIJy7wwGB3w"}
{"name":"Roll Skill","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n  skills: [\"per\", \"sen\", \"ste\", \"sur\"],\r\n  labels: [null, null, null, null],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC && o.hasPerm(game.user, \"OWNER\"));\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _roll = async function(type) {\r\n    for (let o of actors) {\r\n      await o.rollSkill(type, { event: new MouseEvent({}), skipDialog: true });\r\n    }\r\n  };\r\n\r\n  const buttons = c.skills.reduce((cur, s, a) => {\r\n    let label = c.labels[a];\r\n    if (label == null) label = CONFIG.PF1.skills[s] || \"Unknown Skill\";\r\n    cur[s] = {\r\n      label: label,\r\n      callback: () => _roll(s),\r\n    };\r\n    return cur;\r\n  }, {});\r\n\r\n  const msg = `Choose a skill to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>`,\r\n    buttons: buttons,\r\n  }).render(true);\r\n}","author":"T9i9xVjdkHeFZC72","img":"systems/pf1/icons/feats/skill-focus.jpg","actorIds":[],"_id":"mL9k7wUzzFbj1NmY"}
{"name":"Roll Saving Throw","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC && o.hasPerm(game.user, \"OWNER\"));\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _roll = async function(type) {\r\n    for (let o of actors) {\r\n      await o.rollSavingThrow(type, { event: new MouseEvent({}) });\r\n    }\r\n  };\r\n\r\n  const msg = `Choose a saving throw to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>`,\r\n    buttons: {\r\n      fort: {\r\n        label: \"Fortitude\",\r\n        callback: () => _roll(\"fort\"),\r\n      },\r\n      ref: {\r\n        label: \"Reflex\",\r\n        callback: () => _roll(\"ref\"),\r\n      },\r\n      will: {\r\n        label: \"Will\",\r\n        callback: () => _roll(\"will\"),\r\n      },\r\n    },\r\n  }).render(true);\r\n}","author":"T9i9xVjdkHeFZC72","img":"systems/pf1/icons/feats/diehard.jpg","actorIds":[],"_id":"ON7b8yS1lcBxkMuo"}
